//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegistrationCarApp.Model.Entityes
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CarsEntities : DbContext
    {
        public CarsEntities()
            : base("name=CarsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Adress> Adress { get; set; }
        public virtual DbSet<Car> Car { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Locality> Locality { get; set; }
        public virtual DbSet<Mark> Mark { get; set; }
        public virtual DbSet<Model> Model { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<User> User { get; set; }
    
        public virtual int AdressAdd(string street, string numberofhome, string numberofapartments, Nullable<int> localitiid, string postcode)
        {
            var streetParameter = street != null ?
                new ObjectParameter("street", street) :
                new ObjectParameter("street", typeof(string));
    
            var numberofhomeParameter = numberofhome != null ?
                new ObjectParameter("numberofhome", numberofhome) :
                new ObjectParameter("numberofhome", typeof(string));
    
            var numberofapartmentsParameter = numberofapartments != null ?
                new ObjectParameter("numberofapartments", numberofapartments) :
                new ObjectParameter("numberofapartments", typeof(string));
    
            var localitiidParameter = localitiid.HasValue ?
                new ObjectParameter("localitiid", localitiid) :
                new ObjectParameter("localitiid", typeof(int));
    
            var postcodeParameter = postcode != null ?
                new ObjectParameter("postcode", postcode) :
                new ObjectParameter("postcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdressAdd", streetParameter, numberofhomeParameter, numberofapartmentsParameter, localitiidParameter, postcodeParameter);
        }
    
        public virtual int Authorization(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Authorization", loginParameter, passwordParameter);
        }
    
        public virtual int CarAdd(string number, string region, string insurancenumber, Nullable<int> colorid, string vin, string year, Nullable<int> ownerid, Nullable<int> modelid)
        {
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var insurancenumberParameter = insurancenumber != null ?
                new ObjectParameter("insurancenumber", insurancenumber) :
                new ObjectParameter("insurancenumber", typeof(string));
    
            var coloridParameter = colorid.HasValue ?
                new ObjectParameter("colorid", colorid) :
                new ObjectParameter("colorid", typeof(int));
    
            var vinParameter = vin != null ?
                new ObjectParameter("vin", vin) :
                new ObjectParameter("vin", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var owneridParameter = ownerid.HasValue ?
                new ObjectParameter("ownerid", ownerid) :
                new ObjectParameter("ownerid", typeof(int));
    
            var modelidParameter = modelid.HasValue ?
                new ObjectParameter("modelid", modelid) :
                new ObjectParameter("modelid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CarAdd", numberParameter, regionParameter, insurancenumberParameter, coloridParameter, vinParameter, yearParameter, owneridParameter, modelidParameter);
        }
    
        public virtual int ColorAdd(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ColorAdd", nameParameter);
        }
    
        public virtual int CountryAdd(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountryAdd", nameParameter);
        }
    
        public virtual int LocalityAdd(string name, Nullable<int> stateid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var stateidParameter = stateid.HasValue ?
                new ObjectParameter("stateid", stateid) :
                new ObjectParameter("stateid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LocalityAdd", nameParameter, stateidParameter);
        }
    
        public virtual int MarkAdd(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkAdd", nameParameter);
        }
    
        public virtual int ModelAdd(string name, string year, Nullable<int> markid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var markidParameter = markid.HasValue ?
                new ObjectParameter("markid", markid) :
                new ObjectParameter("markid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModelAdd", nameParameter, yearParameter, markidParameter);
        }
    
        public virtual int PersonAdd(string name, string midlename, string lastname, Nullable<int> adressid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var midlenameParameter = midlename != null ?
                new ObjectParameter("midlename", midlename) :
                new ObjectParameter("midlename", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var adressidParameter = adressid.HasValue ?
                new ObjectParameter("adressid", adressid) :
                new ObjectParameter("adressid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonAdd", nameParameter, midlenameParameter, lastnameParameter, adressidParameter);
        }
    
        public virtual int StateAdd(string name, Nullable<int> countryid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("countryid", countryid) :
                new ObjectParameter("countryid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StateAdd", nameParameter, countryidParameter);
        }
    
        public virtual int UserAdd(string login, string password, string email, Nullable<int> roleid, Nullable<int> personid)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserAdd", loginParameter, passwordParameter, emailParameter, roleidParameter, personidParameter);
        }
    }
}
